[
	[
		{
			"text": "\"use strict\"\n\nlet o3dv = {}\n;(async ()=>{\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "0",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "//let\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "99",
					"b": "99",
					"frame": "0"
				}
			]
		},
		{
			"text": "\tlet lih = ru.lihat\n\tlet h2 = document.querySelector('h2')\n\tlet canv = o3dv.canv = document.querySelector('canvas')\n\tlet cx = o3dv.cx = canv.getContext('webgpu')\n\tlet m4 = wgpuMatrix.mat4\n\tlet v3 = wgpuMatrix.vec3\n\tlet w = canv.width\n\tlet h = canv.height\n\t\n\tlet errmsg = '!!__ERROR__!! : '\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "99",
					"b": "99",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n//indices padding, buffer harus 4 byte\nlet indarrpad = ()=>{\n\tif(indarr.length%2){\n\t\tindarr.push(0)\n\t}\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "//canvas resize\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "0",
					"g": "255",
					"b": "0",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\tlet canvres = e=>{\n\t\tlet s = canv.style\n\t\tif(innerWidth/innerHeight > canv.width/canv.height){\n\t\t\ts.height = '100%'\n\t\t\ts.width = ''\n\t\t}else{\n\t\t\ts.height = ''\n\t\t\ts.width = '100%'\n\t\t}\n\t}\n\taddEventListener('resize',canvres,)\n\tcanvres()\n",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "0",
					"g": "255",
					"b": "0",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "//adapter\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\tlet adap = await navigator.gpu.requestAdapter()\n\tlet dv = await adap.requestDevice()\n",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "//presentationFormat\n//",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "0",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\tlet presentationFormat = navigator.gpu.getPreferredCanvasFormat()\n\tcx.configure({\n\t\tdevice:dv,\n\t\tformat: presentationFormat,\n\t})\n",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "0",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\t//meshshader\n\tlet code = await fetch('js/O3DV-meshshader.txt')\n\tcode = await code.text()\n\tlet meshmod = dv.createShaderModule({\n\t\tlabel:'ini mesh module',\n\t\tcode,\n\t})\n",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n/*================\n\t//screenshader\n\tcode = await fetch('js/O3DV-screenshader.txt')\n\tcode = await code.text()\n\tlih(code)\n\tlet screenmod = dv.createShaderModule({\n\t\tlabel:'ini screen module',\n\t\tcode,\n\t})\n----------------*/\n",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "200",
					"g": "200",
					"b": "200",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "\tlet meshpipe = dv.createRenderPipeline({\n\t\tlabel: 'ini pipa mesh',\n\t\tlayout: 'auto',\n\t\tvertex: {\n\t\t\tmodule:meshmod,\n\t\t\tentryPoint: 'vs',\n\t\t\tbuffers: [\n\t\t\t\t{//pos\n\t\t\t\t\tarrayStride: 3 * 4, // 3 floats, 4 bytes each\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{shaderLocation: 0, offset: 0, format: 'float32x3'},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{//tex\n\t\t\t\t\tarrayStride: 2 * 4, // 1 floats, 4 bytes each\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{shaderLocation: 1, offset: 0, format: 'float32x2'},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{//voroidx\n\t\t\t\t\tarrayStride: 1 * 4,\n\t\t\t\t\tattributes: [\n\t\t\t\t\t\t{shaderLocation: 2, offset: 0, format: 'uint32'},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\tfragment: {\n\t\t\tmodule:meshmod,\n\t\t\tentryPoint: 'fs',\n\t\t\ttargets: [{ format: presentationFormat }],\n\t\t},\n\t\tprimitive: {\n\t\t\tcullMode: 'back',\n\t\t},\n\t\tdepthStencil: {\n\t\t\tdepthWriteEnabled: true,\n\t\t\tdepthCompare: 'greater',\n\t\t\tformat: 'depth24plus',\n\t\t},\n\t})\n",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "111",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\tlet renderPassDescriptor = {\n\t\tlabel: 'our basic canvas meshPass',\n\t\tcolorAttachments: [\n\t\t\t{\n\t\t\t\tclearValue: [0.3, 0.1, 0.1, 1],\n\t\t\t\tloadOp: 'clear',\n\t\t\t\tstoreOp: 'store',\n\t\t\t\tview:null,// <- to be filled out when we render\n\t\t\t},\n\t\t],\n\t\tdepthStencilAttachment: {\n\t\t\tdepthClearValue: 0.0,\n\t\t\tdepthLoadOp: 'clear',\n\t\t\tdepthStoreOp: 'store',\n\t\t\tview:null,// <- to be filled out when we render\n\t\t},\n\t}\n",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "166",
					"b": "111",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "\n/*\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n",
			"visible": false,
			"time": "245723.2044864603",
			"speed": "1",
			"running": true,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				},
				{
					"r": "0",
					"g": "0",
					"b": "0",
					"frame": ".1"
				}
			]
		}
	],
	[
		{
			"text": "\t\n\tlet posarr =\n\to3dv.posarr = [\n\t\t0,1,0,\n\t\t0,0,0,\n\t\t1,0,0,\n\t\t1,-.4,-1,\n\t\t-1,-.4,-1,\n\t\t-1,-.4,1,\n\t\t1,-.4,1,\n\t\t0,1,-.5,\n\t\t0,-2,-.5,\n\t\t1,-2,-.5,\n\t]\n\t//coba vvv\n\t\tposarr =\n\t\to3dv.posarr =\n\t\t[\n\t\t\t/*0,1,0,\n\t\t\t0,0,0,\n\t\t\t1,0,0,*/\n\t\t]\n\t// ^^^ sudah\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "199",
					"g": "199",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\tlet texarr =\n\to3dv.texarr = [\n\t\t-2,7,\n\t\t-2,-2,\n\t\t7,-2,\n\t\t.6,.6,\n\t\t-.6,.6,\n\t\t-.6,-.6,\n\t\t.6,-.6,\n\t\t0,0,\n\t\t0,0,\n\t\t0,0,\n\t]\n\t//coba vvv\n\t\ttexarr =\n\t\to3dv.texarr =\n\t\t[\n\t\t\t/*-2,7,\n\t\t\t-2,-2,\n\t\t\t7,-2,*/\n\t\t]\n\t// ^^^ sudah\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "99",
					"b": "99",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\tlet voroidxarr =\n\to3dv.voroidxarr = [\n\t\t1,\n\t\t0,\n\t\t2,\n\t\t2,\n\t\t0,\n\t\t1,\n\t\t1,\n\t\t2,\n\t\t2,\n\t\t2,\n\t]\n\t//coba vvv\n\t\tvoroidxarr =\n\t\to3dv.voroidxarr =\n\t\t[\n\t\t\t/*2,\n\t\t\t0,\n\t\t\t2,*/\n\t\t]\n\t// ^^^ sudah\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "234",
					"b": "216",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\tlet indarr =\n\to3dv.indarr = [\n\t\t1,2,0,\n\t\t3,4,5,\n\t\t3,5,6,\n\t\t7,8,9,\n\t]\n\t//coba vvv\n\t\tindarr =\n\t\to3dv.indarr =\n\t\t[]\n\t// ^^^ sudah\n\t\n\tindarrpad()\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "200",
					"b": "177",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n\tlet persp = o3dv.persp = m4.identity()\n\tlet cam = m4.identity()\n\tlet view = m4.identity()//hasil dari persp*cam \n\t\n    m4.perspective(\n        1.3,//rad\n        w/h,\n        .01,      // zNear\n        9.01,   // zFar\n        persp,\n    );\n\t\n\t//change z to 1-z\n\tm4.invert(persp,persp,)\n\t\tm4.translate(persp,[0,0,1,],persp)\n\t\tm4.scale(persp,[1,1,-1,],persp,)\n\tm4.invert(persp,persp,)\n\t//then it wokkkkkk, HOW?? \n/*================\n----------------*/\n",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "188",
					"g": "255",
					"b": "188",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\t//let layar\n",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "177",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "\t\n\tlet posbuf = dv.createBuffer({\n\t\tlabel:'ini posbuf',\n\t\tsize:0xffff*4,\n\t\tusage:\n\t\t\tGPUBufferUsage.VERTEX|\n\t\t\tGPUBufferUsage.COPY_DST\n\t\t,\n\t})\n\tdv.queue.writeBuffer(\n\t\tposbuf,\n\t\t0,\n\t\tnew Float32Array(posarr),\n\t)\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "144",
					"g": "144",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\tlet texbuf = dv.createBuffer({\n\t\tlabel:'ini texbuf',\n\t\tsize:0xffff*4,\n\t\tusage:\n\t\t\tGPUBufferUsage.VERTEX|\n\t\t\tGPUBufferUsage.COPY_DST\n\t\t,\n\t})\n\tdv.queue.writeBuffer(\n\t\ttexbuf,\n\t\t0,\n\t\tnew Float32Array(texarr),\n\t)\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "211",
					"g": "77",
					"b": "77",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\tlet voroidxbuf = dv.createBuffer({\n\t\tlabel:'ini voroidxbuf',\n\t\tsize:0xffff*4,\n\t\tusage:\n\t\t\tGPUBufferUsage.VERTEX|\n\t\t\tGPUBufferUsage.COPY_DST\n\t\t,\n\t})\n\tdv.queue.writeBuffer(\n\t\tvoroidxbuf,\n\t\t0,\n\t\tnew Uint32Array(voroidxarr),\n\t)\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "215",
					"g": "213",
					"b": "174",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\tlet indbuf = dv.createBuffer({\n\t\tlabel:'ini indbuf',\n\t\tsize:0xffff*4,\n\t\tusage:\n\t\t\tGPUBufferUsage.INDEX|\n\t\t\tGPUBufferUsage.COPY_DST\n\t\t,\n\t})\n\tdv.queue.writeBuffer(\n\t\tindbuf,\n\t\t0,\n\t\tnew Uint16Array(indarr),\n\t)\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "177",
					"g": "144",
					"b": "122",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\tlet matbuf = dv.createBuffer({\n\t\tlabel:'ini matbuf',\n\t\tsize:cam.byteLength,\n\t\tusage:\n\t\t\tGPUBufferUsage.UNIFORM|\n\t\t\tGPUBufferUsage.COPY_DST\n\t\t,\n\t})\n",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "144",
					"g": "211",
					"b": "144",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n/*================\n\tlet layarbuf = dv.createBuffer({\n\t\tlabel:'ini matbuf',\n\t\tsize:w*h*4,\n\t\tusage:\n\t\t\tGPUBufferUsage.STORAGE|\n\t\t\tGPUBufferUsage.COPY_SRC|\n\t\t\tGPUBufferUsage.COPY_DST\n\t\t,\n\t})\n----------------*/\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "188",
					"g": "188",
					"b": "111",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\tlet ulainbuf = dv.createBuffer({\n\t\tlabel:'ini ulain buffer',\n\t\tsize:2*4,\n\t\tusage:\n\t\t\tGPUBufferUsage.STORAGE|\n\t\t\tGPUBufferUsage.COPY_SRC|\n\t\t\tGPUBufferUsage.COPY_DST\n\t\t,\n\t})\n\tdv.queue.writeBuffer(\n\t\tulainbuf,\n\t\t0,\n\t\tnew Uint32Array([w,h,]),\n\t)\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "206",
					"g": "157",
					"b": "201",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "\n/*\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n",
			"visible": true,
			"time": "245611.64519997843",
			"speed": "1",
			"running": true,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				},
				{
					"r": "0",
					"g": "0",
					"b": "0",
					"frame": ".14"
				}
			]
		}
	],
	[
		{
			"text": "",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\t//voronoi tail, batas akhir\n\tlet vorotailarr =\n\to3dv.vorotailarr = []/*========\n\tvorotailarr.push(\n\t\t1+\n\t\t1+\n\t\t1+\n\t\t1\n\t)\n\tvorotailarr.push(\n\t\t1+\n\t\t1+\n\t\t1+\n\tvorotailarr[vorotailarr.length-1])\n\tvorotailarr.push(\n\t\t1+\n\t\t1+\n\t\t1+\n\t\t1+\n\t\t1+\n\t\t1+\n\tvorotailarr[vorotailarr.length-1])\n--------*/\t\n/*========\n\tfor(let naA in vorotailarr){\n\t\tlet vaA =\n\t\tvorotailarr[naA = +naA]\n\t\tvorotailarr[naA] =\n\t\tnaA?\n\t\t(vorotailarr[naA-1]+vaA):\n\t\tvaA\n\t}\n--------*/\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "177",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\t\n\tlet voroposarr =\n\to3dv.voroposarr = [\n/*========\n\t\t-.3,-.3,\n\t\t.3,-.3,\n\t\t.3,.3,\n\t\t-.3,.3,\n\t\t\n\t\t\n\t\t0,0,\n\t\t0,-.4,\n\t\t-.4,0,\n\t\t\n\t\t\n\t\t-.1,0,\n\t\t0,.1,\n\t\t0,-.1,\n\t\t-.3,0,\n\t\t0,-.3,\n\t\t0,.3,\n--------*/\n\t]\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "222",
					"g": "188",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\t\n\tlet vorocolorarr =\n\to3dv.vorocolorarr = [\n/*========\n\t\t0x00ff00ff,\n\t\t0x77004499,\n\t\t0xff0011aa,\n\t\t0x4400ffbb,\n\t\t\n\t\t\n\t\t0xffffffcc,\n\t\t0x888811dd,\n\t\t0xff0022ff,\n\t\t\n\t\t\n\t\t0xff0000ff,\n\t\t0xffffffff,\n\t\t0xaaaaaaff,\n\t\t0xcc0000ff,\n\t\t0x005500ff,\n\t\t0x000000ff,\n--------*/\n\t]\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "188",
					"b": "155",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n\tlet vorotailbuf = dv.createBuffer({\n\t\tlabel:'ini voronoi tail buf',\n\t\tsize:0xffff*4,\n\t\tusage:\n\t\t\tGPUBufferUsage.STORAGE|\n\t\t\tGPUBufferUsage.COPY_SRC|\n\t\t\tGPUBufferUsage.COPY_DST\n\t\t,\n\t})\n\tdv.queue.writeBuffer(\n\t\tvorotailbuf,\n\t\t0,\n\t\tnew Uint32Array(vorotailarr),\n\t)\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "127",
					"g": "203",
					"b": "201",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n\tlet voroposbuf = dv.createBuffer({\n\t\tlabel:'ini voronoi pos buf',\n\t\tsize:0xffff*4,\n\t\tusage:\n\t\t\tGPUBufferUsage.STORAGE|\n\t\t\tGPUBufferUsage.COPY_SRC|\n\t\t\tGPUBufferUsage.COPY_DST\n\t\t,\n\t})\n\tdv.queue.writeBuffer(\n\t\tvoroposbuf,\n\t\t0,\n\t\tnew Float32Array(voroposarr),\n\t)\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "174",
					"g": "138",
					"b": "211",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n\tlet vorocolorbuf = dv.createBuffer({\n\t\tlabel:'ini voronoi color buf',\n\t\tsize:0xffff*4,\n\t\tusage:\n\t\t\tGPUBufferUsage.STORAGE|\n\t\t\tGPUBufferUsage.COPY_SRC|\n\t\t\tGPUBufferUsage.COPY_DST\n\t\t,\n\t})\n\tdv.queue.writeBuffer(\n\t\tvorocolorbuf,\n\t\t0,\n\t\tnew Uint32Array(vorocolorarr),\n\t)\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "223",
					"g": "144",
					"b": "126",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "\n/*\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n",
			"visible": true,
			"time": "245596.44589997904",
			"speed": "1",
			"running": true,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				},
				{
					"r": "0",
					"g": "0",
					"b": "0",
					"frame": ".12"
				}
			]
		}
	],
	[
		{
			"text": "\t\n\tlet depthtex = dv.createTexture({\n\t\tsize: [w,h,],\n\t\tformat: 'depth24plus',\n\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT,\n\t})\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "177",
					"g": "155",
					"b": "133",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "\t\n\tlet meshbind = dv.createBindGroup({\n\t\tlabel: 'iiinnnnii  mesh bindGroup',\n\t\tlayout: meshpipe.getBindGroupLayout(0),\n\t\tentries: [\n\t\t\t{ binding: 0, resource: { buffer: matbuf} },\n\t\t\t//{ binding: 1, resource: { buffer: layarbuf} },\n\t\t\t//{ binding: 2, resource: { buffer: ulainbuf} },\n\t\t\t{binding:3,resource:{buffer:vorotailbuf,},},\n\t\t\t{binding:4,resource:{buffer:voroposbuf,},},\n\t\t\t{binding:5,resource:{buffer:vorocolorbuf,},},\n\t\t],\n\t});\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "177",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "\n\tlet lukis = async ()=>{\n\t\t//dv.queue.writeBuffer(layarbuf,0,new Uint32Array(w*h).fill(0),)\n\t\tif(!indarr.length){return requestAnimationFrame(lukis)}\n\t\t\n\t\tlet encoder = dv.createCommandEncoder({\n\t\t\tlabel: 'encoderrrrrrr',\n\t\t})\n\t\trenderPassDescriptor.colorAttachments[0].view = cx.getCurrentTexture().createView()\n\t\trenderPassDescriptor.depthStencilAttachment.view = depthtex.createView()\n\t\tlet pass = encoder.beginRenderPass(renderPassDescriptor)\n\t\tpass.setPipeline(meshpipe)\n\t\tpass.setBindGroup(0, meshbind)\n\t\tpass.setVertexBuffer(0,posbuf,)\n\t\tpass.setVertexBuffer(1,texbuf,)\n\t\tpass.setVertexBuffer(2,voroidxbuf,)\n\t\tpass.setIndexBuffer(indbuf,'uint16',)\n\t\tpass.drawIndexed(indarr.length,1,0,0,0,)\n\t\tpass.end()\n\t\t\n\t\tdv.queue.submit([encoder.finish()])\n\t\tawait dv.queue.onSubmittedWorkDone()\n\t\trequestAnimationFrame(lukis)\n\t\t//lukis()\n\t}\n\tlet prm//lukis promise\n\trequestAnimationFrame(lukis)\n\tlih('sudah submit')\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "177",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "\n/*\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n",
			"visible": true,
			"time": "211909.31969993302",
			"speed": "1",
			"running": true,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				},
				{
					"r": "0",
					"g": "0",
					"b": "0",
					"frame": ".1"
				}
			]
		}
	],
	[
		{
			"text": "",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\t\n\tlet rgel = 0\n\tlet rang = 0\n\tlet zoom = 0\n\tlet fmouse = o3dv.fmouse = e=>{\n\t\t\n\t\tm4.identity(cam)\n\t\tm4.rotateY(cam,rgel,cam,)\n\t\tm4.rotateX(cam,rang,cam,)\n\t\tm4.translate(cam,[0,0,zoom,],cam,)\n\t\tm4.invert(cam,cam,)\n\t\tm4.mul(persp,cam,view,)\n\t\tdv.queue.writeBuffer(matbuf,0,view,)\n\t}\n\taddEventListener('mousemove',e=>{\n\t\trgel += -e.movementX*.01\n\t\trang += -e.movementY*.01\n\t\t\n\t\tlet pi = Math.PI\n\t\trang = Math.max(Math.min(pi/2,rang,),-pi/2,)\n\t\t\n\t\tfmouse()\n\t},)\n\taddEventListener('wheel',e=>{\n\t\tzoom += e.deltaY*.001\n\t\t\n\t\tfmouse()\n\t},)\n\tfmouse()\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "0",
					"g": "177",
					"b": "255",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n//mesh\nlet me = \no3dv.me = {}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "0",
					"g": "255",
					"b": "177",
					"frame": "0"
				}
			]
		},
		{
			"text": "\nme.newvert = ()=>{\n\tposarr.push(0,)\n\tposarr.push(0,)\n\tposarr.push(0,)\n\t\n\ttexarr.push(0,)\n\ttexarr.push(0,)\n\t\n\tvoroidxarr.push(0,)\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\nme.deletevert = ()=>{\n\tposarr.pop()\n\tposarr.pop()\n\tposarr.pop()\n\t\n\ttexarr.pop()\n\ttexarr.pop()\n\t\n\tvoroidxarr.pop()\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "222",
					"g": "222",
					"b": "222",
					"frame": "0"
				}
			]
		},
		{
			"text": "",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\nme.setvertall = data=>{\n/*========\n\tdata = [\n\t\t[vx,vy,vz,tx,ty,voro,],\n\t\t...\n\t]\n--------*/\n\tfor(let i in data){\n\t\tlet vert = data[i = +i]\n\t\t\n\t\tposarr[i*3+0] = vert[0]\n\t\tposarr[i*3+1] = vert[1]\n\t\tposarr[i*3+2] = vert[2]\n\t\t\n\t\ttexarr[i*2+0] = vert[3]\n\t\ttexarr[i*2+1] = vert[4]\n\t\t\n\t\tvoroidxarr[i] = vert[5]\n\t}\n\tdv.queue.writeBuffer(posbuf\t\t,0,new Float32Array(posarr),)\n\tdv.queue.writeBuffer(texbuf\t\t,0,new Float32Array(texarr),)\n\tdv.queue.writeBuffer(voroidxbuf\t,0,new Uint32Array(voroidxarr),)\n\t\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "199",
					"g": "199",
					"b": "199",
					"frame": "0"
				}
			]
		},
		{
			"text": "\nme.setpos = (ipos,x,y,z,)=>{\n/*========\n\tipos -> index pos\n--------*/\n\tlet i = ipos*3\n\tposarr[i+0] = x\n\tposarr[i+1] = y\n\tposarr[i+2] = z\n\tdv.queue.writeBuffer(\n\t\tposbuf,\n\t\ti*4,\n\t\tnew Float32Array([x,y,z,]),\n\t)\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "177",
					"b": "99",
					"frame": "0"
				}
			]
		},
		{
			"text": "\nme.settex = (itc,x,y,)=>{\n/*========\n\titc -> index tex coo\n--------*/\n\tlet i = itc*2\n\ttexarr[i+0] = x\n\ttexarr[i+1] = y\n\tdv.queue.writeBuffer(\n\t\ttexbuf,\n\t\ti*4,\n\t\tnew Float32Array([x,y,]),\n\t)\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "99",
					"g": "177",
					"b": "0",
					"frame": "0"
				}
			]
		},
		{
			"text": "\nme.setvoro = (i,ref,)=>{\n/*========\n\ti -> index voro\n\tref -> ref ke vorotail\n--------*/\n\tvoroidxarr[i] = ref\n\tdv.queue.writeBuffer(\n\t\tvoroidxbuf,\n\t\ti*4,\n\t\tnew Uint32Array([ref]),\n\t)\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "177",
					"g": "111",
					"b": "255",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n//indices\nlet newind = \no3dv.newind = ()=>{\n\tindarr.push(0)\n\tindarr.push(0)\n\tindarr.push(0)\n\tindarr.push(0)\n\tindarr.push(0)\n\tindarr.push(0)\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "77",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\nlet deleteind = \no3dv.deleteind = ()=>{\n\tindarr.pop()\n\tindarr.pop()\n\tindarr.pop()\n\tindarr.pop()\n\tindarr.pop()\n\tindarr.pop()\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "99",
					"g": "99",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\nlet setindall =\no3dv.setindall = data=>{\n\tfor(let i in data){\n\t\tindarr[i = +i] = data[i]\n\t}\n\tdv.queue.writeBuffer(\n\t\tindbuf,\n\t\t0,\n\t\tnew Uint16Array(indarr),\n\t)\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\nlet setind = \no3dv.setind = (iind,i0,i1,i2,i3,i4,i5,)=>{\n\tlet i = iind*3\n\tindarr[i+0] = i0\n\tindarr[i+1] = i1\n\tindarr[i+2] = i2\n\tindarr[i+3] = i3\n\tindarr[i+4] = i4\n\tindarr[i+5] = i5\n\tdv.queue.writeBuffer(\n\t\tindbuf,\n\t\ti*2,\n\t\tnew Uint16Array([i0,i1,i2,i3,i4,i5,]),\n\t)\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "177",
					"g": "177",
					"b": "177",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n//voronoi\nlet vo =\no3dv.vo = {}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "99",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n/*========\nvo.newvoro = ()=>{\n\tlet a = vorotailarr\n\ta.push(a[a.length-1])\n}\n--------*/\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "222",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n/*========\nvo.deletevoro = ()=>{\n\tvorotailarr.pop()\n}\n--------*/\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "222",
					"b": "222",
					"frame": "0"
				}
			]
		},
		{
			"text": "\nvo.setvoroall = data=>{\n/*========\n\tdata = [\n\t\t[\n\t\t\t[x,y,color,],\n\t\t\t...\n\t\t],\n\t\t...\n\t]\n--------*/\n\tru.habisarr(vorotailarr)\n\tru.habisarr(voroposarr)\n\tru.habisarr(vorocolorarr)\n\tfor(let i_voro in data){\n\t\tlet voro = data[i_voro = +i_voro]\n\t\t//vorotailarr[i_voro] = i_voro?vorotailarr[i_voro-1]:0\n\t\tvorotailarr.push(i_voro?vorotailarr[i_voro-1]:0)\n\t\tfor(let i_seed in voro){\n\t\t\tlet seed = voro[i_seed = +i_seed]\n\t\t\tlet i = vorotailarr[i_voro]\n\t\t\tvoroposarr.push(seed[0])\n\t\t\tvoroposarr.push(seed[1])\n\t\t\tvorocolorarr.push(seed[2])\n/*========\n\t\t\tvoroposarr[i*2+0] = seed[0]\n\t\t\tvoroposarr[i*2+1] = seed[1]\n\t\t\tvorocolorarr[i] = seed[2]\n--------*/\n\t\t\tvorotailarr[i_voro]++\n\t\t}\n\t}\n\tdv.queue.writeBuffer(vorotailbuf,0,new Uint32Array(vorotailarr),)\n\tdv.queue.writeBuffer(voroposbuf,0,new Float32Array(voroposarr),)\n\tdv.queue.writeBuffer(vorocolorbuf,0,new Uint32Array(vorocolorarr),)\n\t//sampe sini, voro\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "222",
					"b": "177",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n/*========\nvo.newpos = ()=>{\n\tvoroposarr.push(0,0,)\n}\nvo.setpos = (itail,ipos,x,y,)=>{\n\t\n\t//itail -> index tail\n\t//ipos -> index pos xy\n\t\n\tlet i = itail?vorotailarr[itail-1]:0\n\ti += ipos\n\ti *= 2\n\t\n\tvoroposarr[i+0] = x\n\tvoroposarr[i+1] = y\n\tdv.queue.writeBuffer(\n\t\tvoroposbuf,\n\t\ti*4, //i*xy*byte\n\t\tnew Float32Array([x,y,]),\n\t)\n}\n--------*/\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "200",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "",
			"visible": false,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n//seed\n/*========\nvo.newseed = ()=>{\n\tvoroposarr.push(0)\n\tvoroposarr.push(0)\n\t\n\tvorocolorarr.push(0)\n}\n--------*/\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "0",
					"g": "199",
					"b": "199",
					"frame": "0"
				}
			]
		},
		{
			"text": "\n/*========\nvo.deleteseed = ()=>{\n\tvoroposarr.pop()\n\tvoroposarr.pop()\n\t\n\tvorocolorarr.pop()\n}\n--------*/\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "255",
					"g": "200",
					"b": "255",
					"frame": "0"
				}
			]
		},
		{
			"text": "\nvo.setseed = (iseed,x,y,color,)=>{\n\tvoroposarr[iseed*2+0] = x\n\tvoroposarr[iseed*2+1] = y\n\t\n\tvorocolorarr[iseed] = color\n\tdv.queue.writeBuffer(voroposbuf,iseed*2*4,new Float32Array([x,y,]),)\n\tdv.queue.writeBuffer(vorocolorbuf,iseed*4,new Uint32Array([color,]),)\n}\n",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "196",
					"g": "196",
					"b": "255",
					"frame": "0"
				}
			]
		}
	],
	[
		{
			"text": "})()",
			"visible": true,
			"time": "0",
			"speed": "1",
			"running": false,
			"color": [
				{
					"r": "0",
					"g": "255",
					"b": "255",
					"frame": "0"
				}
			]
		}
	]
]